#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFSIZE 5
int buffer[BUFSIZE];
int in=0, out=0;
sem_t full, empty;
pthread_mutex_t mutex;

void *producer(void *arg) {
    int id = *(int*)arg;
    while (1) {
        int item = rand()%1000;
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[in] = item;
        in = (in+1)%BUFSIZE;
        printf("Producer %d produced %d\n", id, item);
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        sleep(rand()%2 + 1);
    }
}

void *consumer(void *arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int item = buffer[out];
        out = (out+1)%BUFSIZE;
        printf("Consumer %d consumed %d\n", id, item);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        sleep(rand()%3 + 1);
    }
}

int main() {
    pthread_t p,t;
    int pid=1, cid=1;
    sem_init(&full,0,0);
    sem_init(&empty,0,BUFSIZE);
    pthread_mutex_init(&mutex,NULL);
    pthread_create(&p,NULL,producer,&pid);
    pthread_create(&t,NULL,consumer,&cid);
    pthread_join(p,NULL);
    pthread_join(t,NULL);
    return 0;
}
