#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers
#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];                 // State of each philosopher
pthread_mutex_t mutex;        // Global mutex lock
pthread_mutex_t chopstick[N]; // Mutex for each chopstick

void test(int i) {
    if (state[i] == HUNGRY &&
        state[(i + N - 1) % N] != EATING &&
        state[(i + 1) % N] != EATING) {
        // Both neighbors are not eating
        state[i] = EATING;
        printf("Philosopher %d is EATING üç¥\n", i + 1);
        sleep(2); // Simulate eating
        printf("Philosopher %d finished eating and is THINKING üí≠\n", i + 1);
        state[i] = THINKING;
    }
}

void pickup_chopsticks(int i) {
    pthread_mutex_lock(&mutex);   // Enter critical section
    state[i] = HUNGRY;
    printf("Philosopher %d is HUNGRY üòã\n", i + 1);
    test(i);
    pthread_mutex_unlock(&mutex); // Leave critical section
}

void putdown_chopsticks(int i) {
    pthread_mutex_lock(&mutex);
    state[i] = THINKING;
    test((i + N - 1) % N);  // Check left neighbor
    test((i + 1) % N);      // Check right neighbor
    pthread_mutex_unlock(&mutex);
}

void *philosopher(void *num) {
    int i = *(int *)num;
    while (1) {
        sleep(1); // Thinking
        pickup_chopsticks(i);
        sleep(2); // Eating
        putdown_chopsticks(i);
    }
}

int main() {
    int i;
    pthread_t tid[N];
    int phil_num[N];

    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < N; i++) {
        pthread_mutex_init(&chopstick[i], NULL);
        phil_num[i] = i;
    }

    for (i = 0; i < N; i++) {
        pthread_create(&tid[i], NULL, philosopher, &phil_num[i]);
        printf("Philosopher %d is THINKING üí≠\n", i + 1);
    }

    for (i = 0; i < N; i++) {
        pthread_join(tid[i], NULL);
    }

    return 0;
}
