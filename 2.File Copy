#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>      // open()
#include <unistd.h>     // read(), write(), close()
#include <sys/stat.h>   // file permissions

#define BUFFER_SIZE 1024  // Buffer size for reading and writing

int main(int argc, char *argv[]) {
    // Check for proper arguments
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <source_file> <destination_file>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *source_file = argv[1];
    const char *destination_file = argv[2];

    // Open source file for reading
    int src_fd = open(source_file, O_RDONLY);
    if (src_fd < 0) {
        perror("Error opening source file");
        exit(EXIT_FAILURE);
    }

    // Open destination file for writing (create if doesn't exist, truncate if exists)
    int dest_fd = open(destination_file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (dest_fd < 0) {
        perror("Error opening/creating destination file");
        close(src_fd);
        exit(EXIT_FAILURE);
    }

    char buffer[BUFFER_SIZE];
    ssize_t bytesRead;

    // Read from source and write to destination in chunks
    while ((bytesRead = read(src_fd, buffer, sizeof(buffer))) > 0) {
        ssize_t bytesWritten = write(dest_fd, buffer, bytesRead);
        if (bytesWritten != bytesRead) {
            perror("Error writing to destination file");
            close(src_fd);
            close(dest_fd);
            exit(EXIT_FAILURE);
        }
    }

    if (bytesRead < 0) {
        perror("Error reading source file");
    }

    // Close file descriptors
    close(src_fd);
    close(dest_fd);

    printf("File copied successfully from %s to %s\n", source_file, destination_file);

    return 0;
}
