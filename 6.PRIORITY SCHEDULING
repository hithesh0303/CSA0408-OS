/* priority_scheduling.c
 * Non-preemptive Priority Scheduling Algorithm
 */

#include <stdio.h>

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    int pid[n], arrival[n], burst[n], priority[n];
    int waiting[n], turnaround[n], completed[n];

    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("Enter arrival time, burst time, and priority for process %d: ", pid[i]);
        scanf("%d %d %d", &arrival[i], &burst[i], &priority[i]);
        completed[i] = 0;
    }

    int current_time = 0, completed_count = 0;
    int total_wait = 0, total_turnaround = 0;

    printf("\nProcess\tArrival\tBurst\tPriority\tWaiting\tTurnaround\n");

    while (completed_count < n) {
        int idx = -1;
        int highest_priority = 999999; // large number

        // Find process with the highest priority (lowest number)
        for (int i = 0; i < n; i++) {
            if (!completed[i] && arrival[i] <= current_time) {
                if (priority[i] < highest_priority) {
                    highest_priority = priority[i];
                    idx = i;
                }
                // If priority is same, choose by arrival time
                else if (priority[i] == highest_priority) {
                    if (arrival[i] < arrival[idx]) {
                        idx = i;
                    }
                }
            }
        }

        if (idx != -1) {
            waiting[idx] = current_time - arrival[idx];
            if (waiting[idx] < 0) waiting[idx] = 0;
            turnaround[idx] = waiting[idx] + burst[idx];

            current_time += burst[idx];
            completed[idx] = 1;
            completed_count++;

            printf("%d\t%d\t%d\t%d\t\t%d\t%d\n",
                   pid[idx], arrival[idx], burst[idx], priority[idx],
                   waiting[idx], turnaround[idx]);

            total_wait += waiting[idx];
            total_turnaround += turnaround[idx];
        } else {
            current_time++; // no process ready, move time forward
        }
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wait / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround / n);

    return 0;
}
